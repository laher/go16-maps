Go 1.6 - Concurrent Map Access
Golang Auckland Meetup Group
17 Feb 2016
Tags: GoAKL, Go, Go1.6, Auckland, Hapara

Am Laher
Gopher, Hapara Inc.
am.laher@hapara.com
https://github.com/laher/go16-maps

* Go 1.6 announcement.

.image party-gopher.png

Announcement:

.link https://tip.golang.org/doc/go1.6

Slides:

.link https://talks.golang.org/2016/state-of-go.slide#1 

* Concurrent Map Access

- Go now crashes when you trigger a data race in maps.
- Uergh.

* Topics Introduced

- Concurrency
- Race conditions
- Race detector
- Maps (dictionaries / hashtables)
- Goroutines; Mutexes vs Channels

* Introduction

Go maps have always been sensitive to data races.

.link http://dave.cheney.net/2015/12/07/are-go-maps-sensitive-to-data-races

This article gives some more details about the perils of data races.

.link https://software.intel.com/en-us/blogs/2013/01/06/benign-data-races-what-could-possibly-go-wrong

But now, Go will crash _with more certainty_ when you trigger one.

* Example

_Run these examples with & without the race detector. Also, with go1.5 vs go1.6_

.play map_unsafe.go

* Force the race condition

Speed up the program to force the data race.

.play map_unsafe_faster.go

* Protect yourself with panic/recover?

No recovery!

.play map_unsafe_norecovery.go

* What to do?

Use the race detector. Keep using it.
Use a 'memory barrier primitive', e.g.
- sync.Mutex or sync.RWMutex
- Wut, locks? But, but, but ... Hoare's CSP?!

* Solution 1

.play map_safe_mutex.go

* Solution 2

A silly but more CSP-ish option.

.play map_safe_select.go

* Solution 3

Still silly, but more useful. 
 
- Note that it doesn't provide concurrent reads.

.play map_safe_select_refactor.go

* Other design considerations

- Populate your map up-front in a single goroutine.
- Be judicious with use of maps.
- Share the value, not the whole map?
- Use a struct / slice where possible?
- Get the race detector into your build process

* Vendoring

What is vendoring?

- Support for storing 3rd party dependencies, as source, within your code
.link https://golang.org/s/go15vendor

Do you need it?

- Pinning dependency versions
- Repeatable builds
- Remove reliance on 3rd party services for your build
- Only for executables. Not for libraries. IMO.

* Vendoring changes

What has changed in Go1.6?

GO15VENDOREXPERIMENT=1 switched on by default
Better tooling support:
- baked into go/build, not just go/cmd
.link https://github.com/golang/go/issues/12278
- Also go/loader. Which is used by tools like errcheck
.link https://github.com/golang/tools/blob/master/go/loader/loader.go#L28

* That's all 

folks ... for today.

- Let's plan another. March/April-ish.

* Next meetup

- Revisit any topics from today?
- Hello, Go World?
- Polymorphism in Go (using Go types for fun and profit)
- Concurrency patterns
- Go tools (build/ides/static analysis/...)
- Something you'd like to speak about?
